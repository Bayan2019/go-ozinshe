// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: genres.sql

package repositories

import (
	"context"
)

const createGenre = `-- name: CreateGenre :one

INSERT INTO genres(title)
VALUES (?)
RETURNING id, title
`

func (q *Queries) CreateGenre(ctx context.Context, title string) (Genre, error) {
	row := q.db.QueryRowContext(ctx, createGenre, title)
	var i Genre
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const deleteGenre = `-- name: DeleteGenre :exec

DELETE FROM genres WHERE id = ?
`

func (q *Queries) DeleteGenre(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGenre, id)
	return err
}

const getAllGenresOfMovie = `-- name: GetAllGenresOfMovie :many

SELECT g.id, g.title FROM genres AS g
JOIN movies_genres AS mg
ON g.id = mg.genre_id
WHERE mg.movie_id = ?
`

func (q *Queries) GetAllGenresOfMovie(ctx context.Context, movieID int64) ([]Genre, error) {
	rows, err := q.db.QueryContext(ctx, getAllGenresOfMovie, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGenreById = `-- name: GetGenreById :one

SELECT id, title FROM genres WHERE id = ?
`

func (q *Queries) GetGenreById(ctx context.Context, id int64) (Genre, error) {
	row := q.db.QueryRowContext(ctx, getGenreById, id)
	var i Genre
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getGenres = `-- name: GetGenres :many
SELECT id, title FROM genres
`

func (q *Queries) GetGenres(ctx context.Context) ([]Genre, error) {
	rows, err := q.db.QueryContext(ctx, getGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGenre = `-- name: UpdateGenre :one

UPDATE genres 
SET title = ? 
WHERE id = ?
RETURNING id, title
`

type UpdateGenreParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateGenre(ctx context.Context, arg UpdateGenreParams) (Genre, error) {
	row := q.db.QueryRowContext(ctx, updateGenre, arg.Title, arg.ID)
	var i Genre
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}
