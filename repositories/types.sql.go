// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: types.sql

package repositories

import (
	"context"
)

const createType = `-- name: CreateType :one

INSERT INTO types(title)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateType(ctx context.Context, title string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createType, title)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteType = `-- name: DeleteType :exec

DELETE FROM types WHERE id = ?
`

func (q *Queries) DeleteType(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteType, id)
	return err
}

const getTypeById = `-- name: GetTypeById :one

SELECT id, title FROM types WHERE id = ?
`

func (q *Queries) GetTypeById(ctx context.Context, id int64) (Type, error) {
	row := q.db.QueryRowContext(ctx, getTypeById, id)
	var i Type
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getTypes = `-- name: GetTypes :many
SELECT id, title FROM types
`

func (q *Queries) GetTypes(ctx context.Context) ([]Type, error) {
	rows, err := q.db.QueryContext(ctx, getTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Type
	for rows.Next() {
		var i Type
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateType = `-- name: UpdateType :exec

UPDATE types 
SET title = ? 
WHERE id = ?
`

type UpdateTypeParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateType(ctx context.Context, arg UpdateTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateType, arg.Title, arg.ID)
	return err
}
