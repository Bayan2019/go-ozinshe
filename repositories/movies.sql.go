// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movies.sql

package repositories

import (
	"context"
)

const createMovie = `-- name: CreateMovie :one

INSERT INTO movies(title, description, release_year, director, trailer_url, poster_url)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, title, description, release_year, director, rating, is_watched, trailer_url, poster_url
`

type CreateMovieParams struct {
	Title       string
	Description string
	ReleaseYear int64
	Director    string
	TrailerUrl  string
	PosterUrl   string
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Title,
		arg.Description,
		arg.ReleaseYear,
		arg.Director,
		arg.TrailerUrl,
		arg.PosterUrl,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseYear,
		&i.Director,
		&i.Rating,
		&i.IsWatched,
		&i.TrailerUrl,
		&i.PosterUrl,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec

DELETE FROM movies WHERE id = ?
`

func (q *Queries) DeleteMovie(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteMovie, id)
	return err
}

const getMovieById = `-- name: GetMovieById :one

SELECT id, title, description, release_year, director, rating, is_watched, trailer_url, poster_url FROM movies WHERE id = ?
`

func (q *Queries) GetMovieById(ctx context.Context, id interface{}) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovieById, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseYear,
		&i.Director,
		&i.Rating,
		&i.IsWatched,
		&i.TrailerUrl,
		&i.PosterUrl,
	)
	return i, err
}

const getMovies = `-- name: GetMovies :many
SELECT id, title, description, release_year, director, rating, is_watched, trailer_url, poster_url FROM movies
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.ReleaseYear,
			&i.Director,
			&i.Rating,
			&i.IsWatched,
			&i.TrailerUrl,
			&i.PosterUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one

UPDATE movies 
SET title = ?, 
    description = ?, 
    release_year = ?, 
    director = ?, 
    rating = ?, 
    is_watched = ?, 
    trailer_url = ?,
    poster_url = ?
WHERE id = ?
RETURNING id, title, description, release_year, director, rating, is_watched, trailer_url, poster_url
`

type UpdateMovieParams struct {
	Title       string
	Description string
	ReleaseYear int64
	Director    string
	Rating      int64
	IsWatched   bool
	TrailerUrl  string
	PosterUrl   string
	ID          interface{}
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, updateMovie,
		arg.Title,
		arg.Description,
		arg.ReleaseYear,
		arg.Director,
		arg.Rating,
		arg.IsWatched,
		arg.TrailerUrl,
		arg.PosterUrl,
		arg.ID,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.ReleaseYear,
		&i.Director,
		&i.Rating,
		&i.IsWatched,
		&i.TrailerUrl,
		&i.PosterUrl,
	)
	return i, err
}

const updateMovieIsWatched = `-- name: UpdateMovieIsWatched :exec

UPDATE movies
SET is_watched = ?
WHERE id = ?
`

type UpdateMovieIsWatchedParams struct {
	IsWatched bool
	ID        interface{}
}

func (q *Queries) UpdateMovieIsWatched(ctx context.Context, arg UpdateMovieIsWatchedParams) error {
	_, err := q.db.ExecContext(ctx, updateMovieIsWatched, arg.IsWatched, arg.ID)
	return err
}

const updateMovieRating = `-- name: UpdateMovieRating :exec

UPDATE movies
SET rating = ?
WHERE id = ?
`

type UpdateMovieRatingParams struct {
	Rating int64
	ID     interface{}
}

func (q *Queries) UpdateMovieRating(ctx context.Context, arg UpdateMovieRatingParams) error {
	_, err := q.db.ExecContext(ctx, updateMovieRating, arg.Rating, arg.ID)
	return err
}
