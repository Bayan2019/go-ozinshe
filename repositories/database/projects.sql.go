// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: projects.sql

package database

import (
	"context"
	"database/sql"
	"strings"
)

const createProject = `-- name: CreateProject :one

INSERT INTO projects(title, description, type_id, duration_in_mins, release_year, director, producer, keywords)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
`

type CreateProjectParams struct {
	Title          string
	Description    string
	TypeID         int64
	DurationInMins int64
	ReleaseYear    int64
	Director       string
	Producer       string
	Keywords       string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.Title,
		arg.Description,
		arg.TypeID,
		arg.DurationInMins,
		arg.ReleaseYear,
		arg.Director,
		arg.Producer,
		arg.Keywords,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteProject = `-- name: DeleteProject :exec

DELETE FROM projects WHERE id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProjectById = `-- name: GetProjectById :one

SELECT id, created_at, updated_at, title, description, type_id, duration_in_mins, release_year, director, producer, cover, keywords FROM projects WHERE id = ?
`

func (q *Queries) GetProjectById(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectById, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.TypeID,
		&i.DurationInMins,
		&i.ReleaseYear,
		&i.Director,
		&i.Producer,
		&i.Cover,
		&i.Keywords,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, created_at, updated_at, title, description, type_id, duration_in_mins, release_year, director, producer, cover, keywords FROM projects
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.TypeID,
			&i.DurationInMins,
			&i.ReleaseYear,
			&i.Director,
			&i.Producer,
			&i.Cover,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsOfAgeCategory = `-- name: GetProjectsOfAgeCategory :many

SELECT p.id, p.created_at, p.updated_at, p.title, p.description, p.type_id, p.duration_in_mins, p.release_year, p.director, p.producer, p.cover, p.keywords FROM projects AS p
JOIN projects_age_categories AS pac 
ON p.id = pac.project_id
WHERE pac.age_category_id = ?
`

func (q *Queries) GetProjectsOfAgeCategory(ctx context.Context, ageCategoryID int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsOfAgeCategory, ageCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.TypeID,
			&i.DurationInMins,
			&i.ReleaseYear,
			&i.Director,
			&i.Producer,
			&i.Cover,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsOfGenders = `-- name: GetProjectsOfGenders :many

SELECT p.id, p.created_at, p.updated_at, p.title, p.description, p.type_id, p.duration_in_mins, p.release_year, p.director, p.producer, p.cover, p.keywords FROM projects AS p
JOIN projects_genres AS pg 
ON p.id = pg.project_id
WHERE pg.genre_id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetProjectsOfGenders(ctx context.Context, ids []int64) ([]Project, error) {
	query := getProjectsOfGenders
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.TypeID,
			&i.DurationInMins,
			&i.ReleaseYear,
			&i.Director,
			&i.Producer,
			&i.Cover,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsOfGendersAndSearch = `-- name: GetProjectsOfGendersAndSearch :many

SELECT p.id, p.created_at, p.updated_at, p.title, p.description, p.type_id, p.duration_in_mins, p.release_year, p.director, p.producer, p.cover, p.keywords FROM projects AS p
JOIN projects_genres AS pg 
ON p.id = pg.project_id
WHERE pg.genre_id IN (/*SLICE:ids*/?) 
    AND (LOWER(p.title) LIKE '%' + LOWER(?) + '%' 
        OR LOWER(p.description) LIKE '%' + LOWER(?) + '%'
        OR LOWER(p.keywords) LIKE '%' + LOWER(?) + '%')
`

type GetProjectsOfGendersAndSearchParams struct {
	Ids     []int64
	LOWER   string
	LOWER_2 string
	LOWER_3 string
}

func (q *Queries) GetProjectsOfGendersAndSearch(ctx context.Context, arg GetProjectsOfGendersAndSearchParams) ([]Project, error) {
	query := getProjectsOfGendersAndSearch
	var queryParams []interface{}
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.LOWER)
	queryParams = append(queryParams, arg.LOWER_2)
	queryParams = append(queryParams, arg.LOWER_3)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.TypeID,
			&i.DurationInMins,
			&i.ReleaseYear,
			&i.Director,
			&i.Producer,
			&i.Cover,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsOfGenre = `-- name: GetProjectsOfGenre :many

SELECT p.id, p.created_at, p.updated_at, p.title, p.description, p.type_id, p.duration_in_mins, p.release_year, p.director, p.producer, p.cover, p.keywords FROM projects AS p
JOIN projects_genres AS pg 
ON p.id = pg.project_id
WHERE pg.genre_id = ?
`

func (q *Queries) GetProjectsOfGenre(ctx context.Context, genreID int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsOfGenre, genreID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.TypeID,
			&i.DurationInMins,
			&i.ReleaseYear,
			&i.Director,
			&i.Producer,
			&i.Cover,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsOfSearch = `-- name: GetProjectsOfSearch :many

SELECT id, created_at, updated_at, title, description, type_id, duration_in_mins, release_year, director, producer, cover, keywords FROM projects 
WHERE LOWER(title) LIKE '%' + LOWER(?) + '%'
`

func (q *Queries) GetProjectsOfSearch(ctx context.Context, lower string) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsOfSearch, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.TypeID,
			&i.DurationInMins,
			&i.ReleaseYear,
			&i.Director,
			&i.Producer,
			&i.Cover,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsOfType = `-- name: GetProjectsOfType :many

SELECT id, created_at, updated_at, title, description, type_id, duration_in_mins, release_year, director, producer, cover, keywords FROM projects 
WHERE type_id = ?
`

func (q *Queries) GetProjectsOfType(ctx context.Context, typeID int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsOfType, typeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.TypeID,
			&i.DurationInMins,
			&i.ReleaseYear,
			&i.Director,
			&i.Producer,
			&i.Cover,
			&i.Keywords,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setCover = `-- name: SetCover :exec

UPDATE projects
SET updated_at = CURRENT_TIMESTAMP,
    cover = ?
WHERE id = ?
`

type SetCoverParams struct {
	Cover sql.NullString
	ID    int64
}

func (q *Queries) SetCover(ctx context.Context, arg SetCoverParams) error {
	_, err := q.db.ExecContext(ctx, setCover, arg.Cover, arg.ID)
	return err
}

const updateProject = `-- name: UpdateProject :exec

UPDATE projects
SET updated_at = CURRENT_TIMESTAMP,
    title = ?,
    description = ?,
    type_id = ?,
    duration_in_mins = ?,
    release_year = ?,
    director = ?,
    producer = ?,
    keywords = ?
WHERE id = ?
`

type UpdateProjectParams struct {
	Title          string
	Description    string
	TypeID         int64
	DurationInMins int64
	ReleaseYear    int64
	Director       string
	Producer       string
	Keywords       string
	ID             int64
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Title,
		arg.Description,
		arg.TypeID,
		arg.DurationInMins,
		arg.ReleaseYear,
		arg.Director,
		arg.Producer,
		arg.Keywords,
		arg.ID,
	)
	return err
}
