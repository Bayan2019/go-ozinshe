// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: permissions.sql

package database

import (
	"context"
)

const createPermission = `-- name: CreatePermission :one

INSERT INTO permissions(title)
VALUES (?)
RETURNING id
`

func (q *Queries) CreatePermission(ctx context.Context, title string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPermission, title)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deletePermission = `-- name: DeletePermission :exec

DELETE FROM permissions WHERE id = ?
`

func (q *Queries) DeletePermission(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const getPermissionById = `-- name: GetPermissionById :one

SELECT id, title FROM permissions WHERE id = ?
`

func (q *Queries) GetPermissionById(ctx context.Context, id int64) (Permission, error) {
	row := q.db.QueryRowContext(ctx, getPermissionById, id)
	var i Permission
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, title FROM permissions
`

func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :exec

UPDATE permissions 
SET title = ? 
WHERE id = ?
`

type UpdatePermissionParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) error {
	_, err := q.db.ExecContext(ctx, updatePermission, arg.Title, arg.ID)
	return err
}
