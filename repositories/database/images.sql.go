// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: images.sql

package database

import (
	"context"
)

const addImage2Movie = `-- name: AddImage2Movie :exec
INSERT INTO images(id, project_id)
VALUES (?, ?)
`

type AddImage2MovieParams struct {
	ID        string
	ProjectID int64
}

func (q *Queries) AddImage2Movie(ctx context.Context, arg AddImage2MovieParams) error {
	_, err := q.db.ExecContext(ctx, addImage2Movie, arg.ID, arg.ProjectID)
	return err
}

const deleteImage = `-- name: DeleteImage :exec

DELETE FROM images WHERE id = ?
`

func (q *Queries) DeleteImage(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImage = `-- name: GetImage :one

SELECT id, created_at, updated_at, project_id FROM images
WHERE id = ?
`

func (q *Queries) GetImage(ctx context.Context, id string) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
	)
	return i, err
}

const getImages = `-- name: GetImages :many

SELECT id, created_at, updated_at, project_id FROM images
`

func (q *Queries) GetImages(ctx context.Context) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesOfProject = `-- name: GetImagesOfProject :many

SELECT id, created_at, updated_at, project_id FROM images
WHERE project_id = ?
`

func (q *Queries) GetImagesOfProject(ctx context.Context, projectID int64) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImagesOfProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :exec

UPDATE images
SET updated_at = CURRENT_DATE,
    project_id = ?
WHERE id = ?
`

type UpdateImageParams struct {
	ProjectID int64
	ID        string
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) error {
	_, err := q.db.ExecContext(ctx, updateImage, arg.ProjectID, arg.ID)
	return err
}
