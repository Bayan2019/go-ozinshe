// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: videos.sql

package database

import (
	"context"
)

const addVideo2Movie = `-- name: AddVideo2Movie :exec
INSERT INTO videos(id, project_id, href)
VALUES (?, ?, ?)
`

type AddVideo2MovieParams struct {
	ID        string
	ProjectID int64
	Href      string
}

func (q *Queries) AddVideo2Movie(ctx context.Context, arg AddVideo2MovieParams) error {
	_, err := q.db.ExecContext(ctx, addVideo2Movie, arg.ID, arg.ProjectID, arg.Href)
	return err
}

const addVideo2Series = `-- name: AddVideo2Series :exec

INSERT INTO videos(id, project_id, season, serie, href)
VALUES (?, ?, ?, ?, ?)
`

type AddVideo2SeriesParams struct {
	ID        string
	ProjectID int64
	Season    int64
	Serie     int64
	Href      string
}

func (q *Queries) AddVideo2Series(ctx context.Context, arg AddVideo2SeriesParams) error {
	_, err := q.db.ExecContext(ctx, addVideo2Series,
		arg.ID,
		arg.ProjectID,
		arg.Season,
		arg.Serie,
		arg.Href,
	)
	return err
}

const deleteVideo = `-- name: DeleteVideo :exec

DELETE FROM videos WHERE id = ?
`

func (q *Queries) DeleteVideo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteVideo, id)
	return err
}

const getVideo = `-- name: GetVideo :one

SELECT id, created_at, updated_at, project_id, season, serie, href FROM videos
WHERE project_id = ? AND
    season = ? AND
    serie = ?
`

type GetVideoParams struct {
	ProjectID int64
	Season    int64
	Serie     int64
}

func (q *Queries) GetVideo(ctx context.Context, arg GetVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideo, arg.ProjectID, arg.Season, arg.Serie)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectID,
		&i.Season,
		&i.Serie,
		&i.Href,
	)
	return i, err
}

const getVideos = `-- name: GetVideos :many

SELECT id, created_at, updated_at, project_id, season, serie, href FROM videos
`

func (q *Queries) GetVideos(ctx context.Context) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectID,
			&i.Season,
			&i.Serie,
			&i.Href,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosOfProject = `-- name: GetVideosOfProject :many

SELECT id, created_at, updated_at, project_id, season, serie, href FROM videos
WHERE project_id = ?
`

func (q *Queries) GetVideosOfProject(ctx context.Context, projectID int64) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getVideosOfProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectID,
			&i.Season,
			&i.Serie,
			&i.Href,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVideo = `-- name: UpdateVideo :exec

UPDATE videos
SET updated_at = CURRENT_DATE,
    project_id = ?,
    season = ?,
    serie = ?,
    href = ?
WHERE id = ?
`

type UpdateVideoParams struct {
	ProjectID int64
	Season    int64
	Serie     int64
	Href      string
	ID        string
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) error {
	_, err := q.db.ExecContext(ctx, updateVideo,
		arg.ProjectID,
		arg.Season,
		arg.Serie,
		arg.Href,
		arg.ID,
	)
	return err
}
