basePath: /v2
definitions:
  database.AgeCategory:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  database.Genre:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  database.Role:
    properties:
      ageCategories:
        type: integer
      genres:
        type: integer
      id:
        type: integer
      projects:
        type: integer
      roles:
        type: integer
      title:
        type: string
      types:
        type: integer
      users:
        type: integer
    type: object
  views.CreateAgeCategoryRequest:
    properties:
      title:
        type: string
    type: object
  views.CreateGenreRequest:
    properties:
      title:
        type: string
    type: object
  views.CreateRoleRequest:
    properties:
      age_categories:
        type: integer
      genres:
        type: integer
      projects:
        type: integer
      roles:
        type: integer
      title:
        description: ID            int64  `json:"id"`
        type: string
      types:
        type: integer
      users:
        type: integer
    type: object
  views.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  views.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  views.ResponseId:
    properties:
      id:
        type: integer
    type: object
  views.ResponseMessage:
    properties:
      message:
        type: string
    type: object
  views.Role:
    properties:
      age_categories:
        type: integer
      genres:
        type: integer
      id:
        type: integer
      projects:
        type: integer
      roles:
        type: integer
      title:
        type: string
      types:
        type: integer
      users:
        type: integer
    type: object
  views.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  views.TokensResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  views.UpdateAgeCategoryRequest:
    properties:
      title:
        type: string
    type: object
  views.UpdateGenreRequest:
    properties:
      title:
        type: string
    type: object
  views.UpdateProfileRequest:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      name:
        description: Id          int64     `json:"id"`
        type: string
      phone:
        type: string
    type: object
  views.UpdateRoleRequest:
    properties:
      age_categories:
        type: integer
      genres:
        type: integer
      projects:
        type: integer
      roles:
        type: integer
      title:
        description: ID            int64  `json:"id"`
        type: string
      types:
        type: integer
      users:
        type: integer
    type: object
  views.UpdateUserRequest:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      name:
        description: Id          int64     `json:"id"`
        type: string
      phone:
        type: string
      role_ids:
        items:
          type: integer
        type: array
    type: object
  views.User:
    properties:
      date_of_birth:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      roles:
        items:
          $ref: '#/definitions/views.Role'
        type: array
    type: object
host: petstore.swagger.io
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server ÖZINŞE.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ÖZINŞE API
  version: "1.0"
paths:
  /:
    get:
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: body
        "500":
          description: Invalid file
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Giving Common page
      tags:
      - Tests
  /hello:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseMessage'
        "500":
          description: Invalid file
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Saying hello
      tags:
      - Tests
  /v1/age-categories:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.AgeCategory'
            type: array
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Get AgeCategories
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get AgeCategories List
      tags:
      - AgeCategories
    post:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: AgeCategory data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.CreateAgeCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Create AgeCategory
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Create AgeCategory
      tags:
      - AgeCategories
  /v1/age-categories/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't delete AgeCategory
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete AgeCategory
      tags:
      - AgeCategories
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.AgeCategory'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Get AgeCategory
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get AgeCategory
      tags:
      - AgeCategories
    put:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: AgeCategory data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.UpdateAgeCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Update AgeCategory
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Update AgeCategory
      tags:
      - AgeCategories
  /v1/auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: Bearer RefreshToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.TokensResponse'
        "400":
          description: Couldn't find token
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Couldn't find user
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't create tokens
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Refresh
      tags:
      - Auth
  /v1/auth/sign-in:
    post:
      consumes:
      - application/json
      parameters:
      - description: Authentication
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.TokensResponse'
        "400":
          description: Invalid Data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: Incorrect email or password
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Email not found
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't create tokens
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Sign In
      tags:
      - Auth
  /v1/auth/sign-out:
    post:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Couldn't find token
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't revoke session
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Sign Out
      tags:
      - Auth
  /v1/genres:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Genre'
            type: array
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Get genres
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get Genres List
      tags:
      - Genres
    post:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Genre data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.CreateGenreRequest'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Create genre
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Create Genre
      tags:
      - Genres
  /v1/genres/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't delete genre
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete Genre
      tags:
      - Genres
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Genre'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Get genre
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get Genre
      tags:
      - Genres
    put:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Genre data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.UpdateGenreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Update genre
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Update Genre
      tags:
      - Genres
  /v1/roles:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/database.Role'
            type: array
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Get roles
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get Roles List
      tags:
      - Roles
    post:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: Role data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Create role
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Create Role
      tags:
      - Roles
  /v1/roles/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't delete role
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete Role
      tags:
      - Roles
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Role'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Get role
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get Role
      tags:
      - Roles
    put:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: Role data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Update role
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Update Role
      tags:
      - Roles
  /v1/users:
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/views.User'
            type: array
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Get users
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get Users List
      tags:
      - Users
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't hash password
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Create user (Register)
      tags:
      - Users
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't delete user
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete user profile
      tags:
      - Users
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.User'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't get user
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get User
      tags:
      - Users
    put:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "403":
          description: No Permission
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't update user data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user
      tags:
      - Users
  /v1/users/profile:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't delete user
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete user profile
      tags:
      - Users
    get:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.User'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't Get user
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Get User profile
      tags:
      - Users
    put:
      consumes:
      - application/json
      parameters:
      - description: Bearer AccessToken
        in: header
        name: Authorization
        required: true
        type: string
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: No token Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Not found User Middleware
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't update user data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Update user profile
      tags:
      - Users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
