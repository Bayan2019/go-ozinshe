basePath: /v2
definitions:
  views.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  views.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  views.ResponseId:
    properties:
      id:
        type: integer
    type: object
  views.ResponseMessage:
    properties:
      message:
        type: string
    type: object
  views.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  views.TokensResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
host: petstore.swagger.io
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server ÖZINŞE.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ÖZINŞE API
  version: "1.0"
paths:
  /:
    get:
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: body
        "500":
          description: Invalid file
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Giving Common page
      tags:
      - Tests
  /hello:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseMessage'
        "500":
          description: Invalid file
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Saying hello
      tags:
      - Tests
  /v1/auth:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.TokensResponse'
        "400":
          description: Invalid Data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "401":
          description: Incorrect email or password
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "404":
          description: Email not found
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't create tokens
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Sign In
      tags:
      - Auth
  /v1/users:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "500":
          description: Couldn't delete user
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete user
      tags:
      - users
    post:
      consumes:
      - application/json
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/views.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.ResponseId'
        "400":
          description: Invalid data
          schema:
            $ref: '#/definitions/views.ErrorResponse'
        "500":
          description: Couldn't hash password
          schema:
            $ref: '#/definitions/views.ErrorResponse'
      summary: Create user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
